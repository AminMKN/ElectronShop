// <auto-generated />
using System;
using AccountManagement.Infrastructure.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AccountManagement.Infrastructure.EFCore.Migrations
{
    [DbContext(typeof(AccountContext))]
    [Migration("20220301113417_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AccountManagement.Domain.AccountAgg.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProfilePhoto")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Token")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Accounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2022, 3, 1, 15, 4, 17, 587, DateTimeKind.Local).AddTicks(8842),
                            Email = "aspemail007@gmail.com",
                            EmailConfirmed = true,
                            FullName = "مدیر سایت",
                            Password = "10000.YNmL5o6NPRQENvKVLgQaww==.enVFgrgZstDmlnWaXv7o/jjjL8e8F75AUgAk5ZmQEH4=",
                            PhoneNumber = "09876543210",
                            Token = "ihkecrTZxEe/wqmVG8wN/w==",
                            UserName = "OwnerSite"
                        });
                });

            modelBuilder.Entity("AccountManagement.Domain.AccountClaimAgg.AccountClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<bool>("AccountManagement")
                        .HasColumnType("bit");

                    b.Property<bool>("CommentManagement")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DiscountManagement")
                        .HasColumnType("bit");

                    b.Property<bool>("InventoryManagement")
                        .HasColumnType("bit");

                    b.Property<bool>("ShopManagement")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            AccountManagement = true,
                            CommentManagement = true,
                            CreationDate = new DateTime(2022, 3, 1, 15, 4, 17, 587, DateTimeKind.Local).AddTicks(7305),
                            DiscountManagement = true,
                            InventoryManagement = true,
                            ShopManagement = true
                        });
                });

            modelBuilder.Entity("AccountManagement.Domain.AccountClaimAgg.AccountClaim", b =>
                {
                    b.HasOne("AccountManagement.Domain.AccountAgg.Account", "Account")
                        .WithMany("AccountClaims")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("AccountManagement.Domain.AccountAgg.Account", b =>
                {
                    b.Navigation("AccountClaims");
                });
#pragma warning restore 612, 618
        }
    }
}
